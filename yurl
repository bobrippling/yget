#!/bin/sh

debug() {
	if [ -n "$YGET_DEBUG" ]
	then
		mkdir -p $HOME/.yget
		tee "$1"
	else
		cat
	fi
}

get() {
#	[ -e $HOME/.yget/y$V$P.html ] && cat $HOME/.yget/y$V$P.html || {
	curl -L -s -i "$1" |debug $HOME/.yget/y$V$P.html
#	}
# wget only emits headers in case of OK status
#	wget -q --save-headers -O- "$1"
}

export LC_ALL=C
[ $# -eq 1 ] || { echo "usage: $0 URL" 1>&2; exit 1; }

# optional js interpreter for url signature deobfuscation
[ "$JSCMD" ] || {
	JSCMD=`command -v js24 || command -v js || command -v mujs || command -v js17 || command -v smjs || command -v nodejs || command -v node || command -v jsc || echo /bin/false`
}
[ "$JSCMD" != /bin/false ] || { echo 'no js interpreter found' 1>&2; }
printf "jscmd\t$JSCMD\n"

V=$(echo "$1"|sed -n '
	s|[^a-zA-Z0-9_-]|/|g
	s|^...........$|/v/&|
	s|/embed/|/v/|
	s|youtu/be/|/v/|
	s|/p/u/[0-9]*/|/v/|
	s|.*/v/\([^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/]\).*|\1|p')
P=$(echo "$1"|sed -n '
	s|[^a-zA-Z0-9_-]|/|g
	s|^|/p/|
	s|/list/|/p/|
	s|/PL|/p/|
	s|.*/p/\([^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/]*\).*|\1|p')
VURL="https://www.youtube.com/watch?v=$V&hl=en"
PURL="https://www.youtube.com/view_play_list?p=$P"
[ "$P" ] || [ "$V" ] || { echo 'no video id or playlist id found' 1>&2; exit 1; }
[ "$V" ] || {
	# playlist url
	get "$PURL" |awk '
	NR==1 && $0 !~ /200 OK/ {
		print $0 >"/dev/stderr"
	}
	/data-video-ids/{
		sub(/.*data-video-ids="/, "")
		sub(/".*/, "")
		n++
		printf "%03d http://www.youtube.com/watch?v=%s\n", n, $0
	}'
	exit 0
}
[ "$V" ] && {
	# video url
	get "$VURL" |awk -v pl=$P -v jscmd=$JSCMD '
BEGIN {
	for (i = 0; i < 256; i++)
		tab[sprintf("%X", i)] = sprintf("%c", i)
}
function err(msg) {print "error: " msg > "/dev/stderr"}
function unquote(s, i,n,x,t) {
	n = split(s, t, "%")
	s = t[1]
	for (i = 2; i <= n; i++) {
		x = substr(t[i], 1, 2)
		if (x in tab)
			s = s tab[x] substr(t[i], 3)
		else
			s = s "%" t[i]
	}
	return s
}
function unquote2(s, i,n,x,t) {
	n = split(s, t, "&#")
	s = t[1]
	for (i = 2; i <= n; i++) {
		x = substr(t[i], 1, 2) + 0
		if (x > 9 && x < 100)
			s = s sprintf("%c", x) substr(t[i], 4)
		else
			s = s "&#" t[i]
	}
	return s
}
function getmeta() {
	sub(/^.*content="/, "")
	sub(/".*$/, "")
	gsub(/&quot;/, "\"")
	gsub(/&amp;/, "\\&")
	$0 = unquote2($0)
}
function clean(s) {
#	s = tolower(s)
	gsub(/[({]/, "[", s)
	gsub(/[)}]/, "]", s)
	gsub(/[^a-zA-Z0-9.+%:\[\]\-]/, "_", s)
	gsub(/__*/, "_", s)
	sub(/^_/, "", s)
	sub(/_$/, "", s)
	return s
}
NR==1 && $0 !~ /200 OK/ {
	status = $2
	err($0)
}
status ~ /30./ && /^Location:/ {
	err($0)
}
/<meta name="title"/ {
	getmeta()
	c["title"] = $0
}
/<meta name="description"/ {
	getmeta()
	c["desc"] = $0
}
/<meta name="keywords"/ {
	getmeta()
	c["keywords2"] = $0
}
/<strong[^>]*>(Published|Uploaded) on / {
	sub(/.*(Published|Uploaded) on /, "")
	sub(/<.*/, "")
	c["date"] = $0
}
/span class="likes-count"/ {
	sub(/.*"> */, "")
	sub(/<.*/, "")
	c["likes"] = $0
}
/span class="dislikes-count"/ {
	sub(/.*"> */, "")
	sub(/<.*/, "")
	c["dislikes"] = $0
}
/class="watch-view-count/ {
	sub(/.*"watch-view-count" *>/, "")
	sub(/<.*/, "")
	sub(/^ */, "")
	sub(/ views/, "")
	c["views"] = $0
}
/verify[_-]age/ {
	unsafe=1
}
/id="unavailable-message"/ {
	unavail=1
}
function fixsigs(b,  a,j,n) {
	if (!jsdir || !sigjs) return
	tmp=jsdir"/tmp.js"
	if (system("cp "sigjs" "tmp)) {
		err("no sigjs "sigjs)
		return
	}
	j=0
	for (i in b) {
		if (b[i]) {
			a[++j] = i
			print "'$V' fmt"i,b[i] >>jsdir"/sig.in"
			print "sigfun(\""b[i]"\");" >>tmp
		}
	}
	if (!j) return
	fflush(tmp)
	cmd = jscmd" "tmp
	for (i=1; i<=j; i++) {
		if (cmd |getline != 1) {
			err("command failed: "cmd)
			return
		}
		print "'$V' fmt"a[i],$0 >>jsdir"/sig.out"
		b[a[i]] = $0
	}
}
function getsigjs(jsurl,  fn,h5js) {
	fn = jsurl
	sub(/.*-/,"",fn)
	sub(/\/.*/,"",fn)
	if (fn !~ /^[a-zA-Z0-9_]*/)
		fn = "_bad_"

	jsdir = ENVIRON["HOME"]
	if (!jsdir) jsdir = "/tmp"
	jsdir = jsdir "/.yget/" fn
	h5js = jsdir "/html5player.js"
	sigjs = jsdir"/sig.js"
	system("mkdir -p "jsdir)
	print jsurl" '$V'" >>jsdir"/jsurl"
	print "jsurl\t"jsurl

	if (system("test -f "sigjs)) {
		cmd = "curl -L -s "jsurl" |tee "h5js" |grep -o '\''\"signature\",.....'\'' |tee "jsdir"/sigfunccall |sed '\''1s/.*,\\([a-zA-Z0-9]*\\).*/\\1/'\''"
		if (cmd |getline != 1) {
			err("command failed: " cmd)
			return
		}
		fun = $0
		print "sigfun\t"fun
#		cmd = "grep -o -E '\''.{1,255}function "fun"\\(.{1,255}'\'' "h5js" >"jsdir"/sigfuncdef"
#		if (system(cmd)) {
#			err("command failed: " cmd)
#			return
#		}
		print "var window={location:\"\", document:{}, navigator:{plugins:{}}, history:{}};" >sigjs
		print "var document=window.document; var navigator=window.navigator;" >>sigjs
		print "if (typeof print == \"undefined\") print = console.log;" >>sigjs
		print "function sigfun(x){print("fun"(x))}" >>sigjs
		cmd = "sed '\''1s/^(function(){//;s/})();$//'\'' "h5js" >>"sigjs
		if (system(cmd)) {
			err("command failed: " cmd)
			return
		}
	}
}
function getvars() {
	if (map["url_encoded_fmt_stream_map"] !~ /signature%3D/ || map["adaptive_fmts"] !~ /signature%3D/) {
		getsigjs("http:" map["js"])
	}

	n = split(map["caption_tracks"], ct, /,/)
	for (i = 1; i <= n; i++) {
		k = split(ct[i],a,/\\u0026|&/)
		for (j in a) {
			split(a[j], b, /=/)
			sub(/"/, "", b[2])
			d[b[1]] = b[2]
#			print "t",i,b[1],d[b[1]]
		}
		lang=d["lc"]
		tmap[lang] = d["u"]
		tsub=tsub " t_" lang
	}

	n = split(map["url_encoded_fmt_stream_map"], u, /,/)
	for (i = 1; i <= n; i++) {
		k = split(u[i],a,/\\u0026|&/)
		for (j in a) {
			split(a[j], b, /=/)
			sub(/"/, "", b[2])
			d[b[1]] = b[2]
#			print "u",i,b[1],d[b[1]]
		}
		it = d["itag"]
		if (d["url"] !~ /signature%3D/ && d["s"])
			map["sig"it] = d["s"]
		map["url" it] = d["url"]
		map["fmt" it] = d["type"]
		urls = urls " fmt" it " url" it
		map["fmts"] = map["fmts"] it " "
	}
	n = split(map["fmt_list"], u, /,/)
	for (i = 1; i <= n; i++) {
		split(u[i],a,/\//)
		map["fmt" a[1]] = a[2] " " map["fmt" a[1]]
	}

	n = split(map["adaptive_fmts"], u, /,/)
	for (i = 1; i <= n; i++) {
		k = split(u[i],a,/\\u0026|&/)
		for (j in a) {
			split(a[j], b, /=/)
			sub(/"/, "", b[2])
			d[b[1]] = b[2]
#			print "a",i,b[1],d[b[1]]
		}
		it = d["itag"]
		if (d["url"] !~ /signature%3D/ && d["s"])
			map["sig"it] = d["s"]
		map["url" it] = d["url"]
		map["fmt" it] = d["size"] " " d["type"]
		urls = urls " fmt" it " url" it
		map["fmts"] = map["fmts"] it " "
		d["size"]=""
	}

	n = split(map["fmts"],a)
	split("",b)
	for (i=1; i<=n; i++) {
		if ("sig"a[i] in map)
			b[a[i]] = map["sig"a[i]]
	}
	fixsigs(b)
	for (i=1; i<=n; i++) {
		if ("sig"a[i] in map)
			map["url"a[i]] = map["url"a[i]] "&signature=" b[a[i]]
	}

	for (i in tmap) {
		c["t_" i] = unquote(tmap[i])
	}
	for (i in map) {
		c[i] = unquote(map[i])
	}
	# fix keys
	c["id"] = c["video_id"]
	c["length"] = c["length_seconds"]
#	c["tags"] = c["keywords2"]
	c["tags"] = c["keywords"]
	c["thumb"] = "http://i.ytimg.com/vi/" c["video_id"] "/default.jpg"
	c["thumbhq"] = "http://i.ytimg.com/vi/" c["video_id"] "/hqdefault.jpg"
	c["list"] = pl
	c["name"] = clean(tolower(c["title"]))
#	gsub(/\\u0026/, "\\&", c["ttsurl"])
#	c["ttlang"]=c["ttsurl"]
#	sub(/.*asr_langs=/,"", c["ttlang"])
#	sub(/&.*/,"", c["ttlang"])
	ok = 1
}
/"url_encoded_fmt_stream_map"/ {
	sub(/^.*config = \{/, "")
	sub(/};.*$/, "")
	gsub(/\\\//, "/")
	gsub(/\\"/, "``")
	gsub(/}/,"")
	gsub(/: *\{/,":{},")
	n=split($0, a, /, *"/)
	for (i=1; i<=n; i++) {
		split(a[i], b, /": */)
		sub(/^"/,"",b[1])
		sub(/"$/,"",b[1])
		sub(/^"/,"",b[2])
		sub(/"$/,"",b[2])
		map[b[1]] = b[2]
#		print b[1],b[2]
	}
	getvars()
}
END {
	if (!ok) {
		if (unsafe)
			print "err\t(verify your age by signing in)" >"/dev/stderr"
		if (unavail)
			print "err\t(video is unavailable in your country)" >"/dev/stderr"
		exit 1
	}
	N = split("fmts " urls " " tsub " id name length date views title desc tags thumbhq list", a)
	for (i = 1; i <= N; i++)
		print a[i] "\t" c[a[i]]
}'
} | debug "$HOME/.yget/y$V.yurl"
