#!/bin/sh

get() {
	curl -L -s -i "$1"
#	# debug
#	mkdir -p $HOME/.yget
#	curl -L -s -i "$1" |tee $HOME/.yget/y$V$P
# wget only emits headers in case of OK status
#	wget -q --save-headers -O- "$1"
}

export LC_ALL=C
[ $# -eq 1 ] || { echo "usage: $0 URL" 1>&2; exit 1; }
V=$(echo "$1"|sed -n '
	s|[^a-zA-Z0-9_-]|/|g
	s|^...........$|/v/&|
	s|/embed/|/v/|
	s|youtu/be/|/v/|
	s|/p/u/[0-9]*/|/v/|
	s|.*/v/\([^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/]\).*|\1|p')
P=$(echo "$1"|sed -n '
	s|[^a-zA-Z0-9_-]|/|g
	s|^|/p/|
	s|/list/|/p/|
	s|/PL|/p/|
	s|.*/p/\([^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/][^/]*\).*|\1|p')
VURL="http://www.youtube.com/watch?v=$V&hl=en"
PURL="http://www.youtube.com/view_play_list?p=$P"
[ "$P" ] || [ "$V" ] || { echo 'no video id or playlist id found' 1>&2; exit 1; }
[ "$V" ] || {
	# playlist url
	get "$PURL" |awk '
	NR==1 && $0 !~ /200 OK/ {
		print $0 >"/dev/stderr"
	}
	/data-video-ids/{
		sub(/.*data-video-ids="/, "")
		sub(/".*/, "")
		n++
		printf "%03d http://www.youtube.com/watch?v=%s\n", n, $0
	}'
	exit 0
}
[ "$V" ] && {
	# video url
	get "$VURL" |awk -v pl=$P '
BEGIN {
	for (i = 0; i < 256; i++)
		tab[sprintf("%X", i)] = sprintf("%c", i)
}
function err(msg) {print "error: " msg > "/dev/stderr"}
function unquote(s, i,n,x,t) {
	n = split(s, t, "%")
	s = t[1]
	for (i = 2; i <= n; i++) {
		x = substr(t[i], 1, 2)
		if (x in tab)
			s = s tab[x] substr(t[i], 3)
		else
			s = s "%" t[i]
	}
	return s
}
function unquote2(s, i,n,x,t) {
	n = split(s, t, "&#")
	s = t[1]
	for (i = 2; i <= n; i++) {
		x = substr(t[i], 1, 2) + 0
		if (x > 9 && x < 100)
			s = s sprintf("%c", x) substr(t[i], 4)
		else
			s = s "&#" t[i]
	}
	return s
}
function getmeta() {
	sub(/^.*content="/, "")
	sub(/".*$/, "")
	gsub(/&quot;/, "\"")
	gsub(/&amp;/, "\\&")
	$0 = unquote2($0)
}
function clean(s) {
#	s = tolower(s)
	gsub(/[({]/, "[", s)
	gsub(/[)}]/, "]", s)
	gsub(/[^a-zA-Z0-9.+%:\[\]\-]/, "_", s)
	gsub(/__*/, "_", s)
	sub(/^_/, "", s)
	sub(/_$/, "", s)
	return s
}
NR==1 && $0 !~ /200 OK/ {
	status = $2
	err($0)
}
status ~ /30./ && /^Location:/ {
	err($0)
}
/<meta name="title"/ {
	getmeta()
	c["title"] = $0
}
/<meta name="description"/ {
	getmeta()
	c["desc"] = $0
}
/<meta name="keywords"/ {
	getmeta()
	c["keywords2"] = $0
}
/<strong>(Published|Uploaded) on / {
	sub(/.*(Published|Uploaded) on /, "")
	sub(/<.*/, "")
	c["date"] = $0
}
/span class="likes-count"/ {
	sub(/.*"> */, "")
	sub(/<.*/, "")
	c["likes"] = $0
}
/span class="dislikes-count"/ {
	sub(/.*"> */, "")
	sub(/<.*/, "")
	c["dislikes"] = $0
}
/class="watch-view-count/ {
	sub(/.*"watch-view-count">/, "")
	sub(/<.*/, "")
	sub(/^ */, "")
	sub(/ views/, "")
	c["views"] = $0
}
/verify[_-]age/ {
	unsafe=1
}
/id="unavailable-message"/ {
	unavail=1
}
function swap(a,i,j, tmp) {
	tmp = a[j]
	a[j] = a[i]
	a[i] = tmp
}
function op_sw(a,i) {
	swap(a,i,0)
}
function op_rev(a,n, i) {
	for (i=0;2*i+1<n;i++)
		swap(a,i,n-i-1)
}
function op_skip(a,n,k, i) {
	for (i=0;i<n-k;i++)
		a[i]=a[i+k]
}
function do_op(op,a,n) {
	if (op~/^S/)
		op_sw(a,substr(op,3)+0)
	else if (op~/^R/)
		op_rev(a,n)
	else if (op~/^K/) {
		k=substr(op,3)+0
		op_skip(a,n,k)
		n-=k
	}
	return n
}
function scramble(ops,sig,  a,i,n) {
	n = split(sig,a,//)
	op_skip(a,n+1,1)
	for (i=1; i in ops; i++)
		n = do_op(ops[i],a,n)
	sig=""
	for(i=0;i<n;i++)
		sig = sig a[i]
	return sig
}
function getjsops(jsurl,ops,  fn,fnops,dir,i,n) {
	fn = jsurl
	sub(/.*\//,"",fn)
	dir = ENVIRON["HOME"]
	if (!dir) dir = "/tmp"
	dir = dir "/.yget"
	fn = dir "/" clean(fn)
	fnops = fn".ops"
	for (i=1; getline ops[i] < fnops == 1; i++);
	if (i<=1) {
		cmd = "cat "fn" 2>/dev/null || { mkdir -p "dir" && curl -L -s "jsurl" |sed -n '\''s/.*\\(function ..(a){a=a\\.split(\"\");[^}]*join(\"\")}\\).*/\\1/p'\'' |tee "fn" ; }"
		for (;;) {
			if (cmd |getline != 1)
				err("command failed: " cmd)
			if ($0 !~ /[^a-zA-Z][a-zA-Z][a-zA-Z]\.[a-zA-Z][a-zA-Z][^a-zA-Z]/)
				break
		}
		fun = $0
		if (!sub(/.*split\(""\);a=/,"",fun)) err("bad fun prefix in "jsurl": " fun)
		if (!sub(/[)b];return a.*/,"",fun)) err("bad fun suffix in "jsurl": " fun)
		n=split(fun,ops,/[)b];(a=|var b=)/)
		printf "" > fn ".ops"
		for (i=1; i<=n; i++) {
			if (ops[i] ~ /^..\(a,/) ops[i]="S " substr(ops[i],6)
			else if (ops[i] ~ /^a\[0\];a\[0\]=a\[/) {sub(/.*=a\[/,"S ",ops[i]); sub(/%.*/,"",ops[i]);}
			else if (ops[i] ~ /^..reverse\(/) ops[i]="R"
			else if (ops[i] ~ /^..slice\(/) ops[i]="K " substr(ops[i],9)
			else err("bad op in "jsurl": " ops[i] ")")
			print ops[i] >> fn ".ops"
		}
	}
}
function getvars() {
	if (map["url_encoded_fmt_stream_map"] !~ /signature%3D/ || map["adaptive_fmts"] !~ /signature%3D/) {
		getjsops("http:" map["js"],jsops)
	}
	n = split(map["url_encoded_fmt_stream_map"], u, /,/)
	for (i = 1; i <= n; i++) {
		k = split(u[i],a,/\\u0026|&/)
		for (j in a) {
			split(a[j], b, /=/)
			sub(/"/, "", b[2])
			d[b[1]] = b[2]
#			print "u",i,b[1],d[b[1]]
		}
		it = d["itag"]
		if (d["url"] !~ /signature%3D/) {
			d["url"] = d["url"] "&signature=" scramble(jsops,d["s"])
		}
		map["url" it] = d["url"]
		map["fmt" it] = d["type"]
		urls = urls " fmt" it " url" it
		map["fmts"] = map["fmts"] it " "
	}
	n = split(map["fmt_list"], u, /,/)
	for (i = 1; i <= n; i++) {
		split(u[i],a,/\//)
		map["fmt" a[1]] = a[2] " " map["fmt" a[1]]
	}

	n = split(map["adaptive_fmts"], u, /,/)
	for (i = 1; i <= n; i++) {
		k = split(u[i],a,/\\u0026|&/)
		for (j in a) {
			split(a[j], b, /=/)
			sub(/"/, "", b[2])
			d[b[1]] = b[2]
#			print "a",i,b[1],d[b[1]]
		}
		it = d["itag"]
		if (d["url"] !~ /signature%3D/) {
			d["url"] = d["url"] "&signature=" scramble(jsops,d["s"])
		}
		map["url" it] = d["url"]
		map["fmt" it] = d["size"] " " d["type"]
		urls = urls " fmt" it " url" it
		map["fmts"] = map["fmts"] it " "
		d["size"]=""
	}

	for (i in map) {
		c[i] = unquote(map[i])
	}
	# fix keys
	c["id"] = c["video_id"]
	c["length"] = c["length_seconds"]
#	c["tags"] = c["keywords2"]
	c["tags"] = c["keywords"]
	c["thumb"] = "http://i.ytimg.com/vi/" c["video_id"] "/default.jpg"
	c["thumbhq"] = "http://i.ytimg.com/vi/" c["video_id"] "/hqdefault.jpg"
	c["list"] = pl
	c["name"] = clean(tolower(c["title"]))
	gsub(/\\u0026/, "\\&", c["ttsurl"])
	c["ttlang"]=c["ttsurl"]
	sub(/.*asr_langs=/,"", c["ttlang"])
	sub(/&.*/,"", c["ttlang"])
	ok = 1
}
/"url_encoded_fmt_stream_map"/ {
	sub(/^.*config = \{/, "")
	sub(/};.*$/, "")
	gsub(/\\\//, "/")
	gsub(/}/,"")
	gsub(/: *\{/,": {}, ")
	n=split($0, a, /, /)
	for (i=1; i<=n; i++) {
		split(a[i], b, /": ?/)
		sub(/^"/,"",b[1])
		sub(/"$/,"",b[1])
		sub(/^"/,"",b[2])
		sub(/"$/,"",b[2])
		map[b[1]] = b[2]
#		print b[1],b[2]
	}
	getvars()
}
END {
	if (!ok) {
		if (unsafe)
			print "err\t(verify your age by signing in)" >"/dev/stderr"
		if (unavail)
			print "err\t(video is unavailable in your country)" >"/dev/stderr"
		exit 1
	}
	N = split("fmts " urls " id name length date views title desc tags thumbhq list", a)
	for (i = 1; i <= N; i++)
		print a[i] "\t" c[a[i]]
}'
}
